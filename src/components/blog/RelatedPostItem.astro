---
import type { ImageMetadata } from 'astro';
import { Icon } from 'astro-icon/components';
import Image from '~/components/common/Image.astro';
import PostTags from '~/components/blog/Tags.astro';

import { APP_BLOG } from 'astrowind:config';
import type { Post } from '~/types';

import { getPermalink } from '~/utils/permalinks';
import { findImage } from '~/utils/images';
import { getFormattedDate } from '~/utils/utils';

export interface Props {
  post: Post;
}

const { post } = Astro.props;
const image = (await findImage(post.image)) as ImageMetadata | undefined;
const link = APP_BLOG?.post?.isEnabled ? getPermalink(post.permalink, 'post') : '';
---

<div 
  class="relative"
  data-protected={post.protected ? 'true' : 'false'}
>
  <article class="mb-6 transition">
    <div class="relative md:h-64 bg-gray-400 dark:bg-slate-700 rounded shadow-lg mb-6">
      {
        image && (
          <a href={link ?? 'javascript:void(0)'}>
            <Image
              src={image}
              class="w-full md:h-full rounded shadow-lg bg-gray-400 dark:bg-slate-700"
              widths={[400, 900]}
              width={400}
              sizes="(max-width: 900px) 400px, 900px"
              alt={post.title}
              aspectRatio="16:9"
              layout="cover"
              loading="lazy"
              decoding="async"
            />
          </a>
        )
      }
    </div>
    <h3 class="mb-2 text-xl font-bold leading-tight sm:text-2xl font-heading">
      {
        link ? (
          <a
            href={link}
            class="hover:text-primary-600 underline underline-offset-4 decoration-1 decoration-dotted transition ease-in duration-200"
          >
            {post.protected ? (
              <span class="flex items-center gap-2">
                <span class="lock-status">
                  <Icon name="tabler:lock" class="w-5 h-5 text-primary-600 lock-icon" />
                  <Icon name="tabler:lock-open" class="w-5 h-5 text-green-600 unlock-icon hidden" />
                </span>
                {post.title}
              </span>
            ) : (
              post.title
            )}
          </a>
        ) : (
          post.title
        )
      }
    </h3>
    <p class="text-muted dark:text-slate-400 text-lg">{post.excerpt}</p>
  </article>
</div>

<script>
  /**
   * 检查并更新认证状态
   * 通过调用 /api/auth/status 端点来确定用户是否已登录
   */
  async function updateAuthStatus() {
    try {
      const response = await fetch('/api/auth/status');
      const isAuthenticated = response.status === 200;
      updateProtectedContent(isAuthenticated);
    } catch (error) {
      updateProtectedContent(false);
    }
  }

  /**
   * 更新受保护内容的显示状态
   * @param {boolean} isAuthenticated - 用户是否已认证
   */
  function updateProtectedContent(isAuthenticated) {
    const protectedArticles = document.querySelectorAll('div[data-protected="true"]');
    
    protectedArticles.forEach(article => {
      if (isAuthenticated) {
        article.classList.add('is-authenticated');
        article.classList.remove('not-authenticated');
      } else {
        article.classList.remove('is-authenticated');
        article.classList.add('not-authenticated');
      }
    });
  }

  // 初始化未认证状态
  document.querySelectorAll('div[data-protected="true"]').forEach(article => {
    article.classList.add('not-authenticated');
  });

  // 页面加载时检查认证状态
  updateAuthStatus();

  // 监听页面导航事件
  document.addEventListener('astro:page-load', () => {
    document.querySelectorAll('div[data-protected="true"]').forEach(article => {
      article.classList.add('not-authenticated');
    });
    updateAuthStatus();
  });
</script>

<style>
  /* 未登录状态样式 */
  div.not-authenticated .lock-icon {
    display: block;
  }

  div.not-authenticated .unlock-icon {
    display: none;
  }

  /* 已登录状态样式 */
  div.is-authenticated .lock-icon {
    display: none;
  }

  div.is-authenticated .unlock-icon {
    display: block;
  }

  /* 过渡动画 */
  .lock-status {
    transition: all 0.3s ease-in-out;
  }
</style>
