---
import type { InferGetStaticPropsType, GetStaticPaths } from 'astro';
import merge from 'lodash.merge';
import type { ImageMetadata } from 'astro';
import Layout from '~/layouts/PageLayout.astro';
import SinglePost from '~/components/blog/SinglePost.astro';
import ToBlogLink from '~/components/blog/ToBlogLink.astro';
import RelatedPosts from '~/components/blog/RelatedPosts.astro';
import Sidebar from '~/components/blog/Sidebar.astro';

import { getCanonical, getPermalink } from '~/utils/permalinks';
import { getStaticPathsBlogPost, blogPostRobots, findPostsByPermalink, fetchPosts } from '~/utils/blog';
import { findImage } from '~/utils/images';
import type { MetaData } from '~/types';

// 使用混合渲染模式
export const prerender = false;

// 从URL中获取博客文章的permalink
const blogPath = Astro.params.blog;
console.log('Blog Path:', blogPath);
console.log('Session:', Astro.locals.session);
console.log('User:', Astro.locals.user);

if (!blogPath) {
  return Astro.redirect('/404', 404);
}

// 获取所有文章并打印它们的permalinks
const allPosts = await fetchPosts();
console.log('Available permalinks:', allPosts.map(p => p.permalink));

// 根据permalink查找文章
const posts = await findPostsByPermalink([blogPath]);
console.log('Found posts:', posts.length);
const post = posts[0];

// 如果文章不存在，返回404
if (!post) {
  console.log('Post not found for path:', blogPath);
  return Astro.redirect('/404', 404);
}

// 如果是受保护的文章，检查用户是否已登录
if (post.protected) {
  const session = Astro.locals.session;
  if (!session) {
    const loginUrl = new URL('/login', Astro.url);
    loginUrl.searchParams.set('redirect', Astro.url.pathname);
    loginUrl.searchParams.set('reason', 'protected_post');
    loginUrl.searchParams.set('title', post.title);
    return Astro.redirect(loginUrl.toString(), 302);
  }
}

const url = getCanonical(getPermalink(post.permalink, 'post'));
const image = (await findImage(post.image)) as ImageMetadata | string | undefined;

const metadata = merge(
  {
    title: post.title,
    description: post.excerpt,
    robots: {
      index: post.draft ? false : true,
      follow: post.draft ? false : true,
    },
    openGraph: {
      type: 'article',
      ...(image ? { images: [{ url: image, width: 1200, height: 630 }] } : {}),
    },
  },
  { ...(post.metadata ? { ...post.metadata } : {}) },
) as MetaData;
---

<Layout metadata={metadata}>
  <section class="px-4 sm:px-6 py-8 sm:py-12 lg:py-16 mx-auto max-w-7xl">
    <div class="grid grid-cols-1 md:grid-cols-12 gap-4">
      <Sidebar />
      
      {/* 右侧内容区 */}
      <main class="md:col-span-9">
        <div class="bg-white dark:bg-slate-800 p-6 rounded-lg shadow-sm">
          <SinglePost post={post} url={url} />
          <ToBlogLink />
          {post.tags && <RelatedPosts tags={post.tags} post={post} />}
        </div>
      </main>
    </div>
  </section>
</Layout>
